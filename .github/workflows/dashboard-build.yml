name: dashboard-eod

on:
  workflow_dispatch: {}
  schedule:
    # NY close + buffer (tune if needed). 21:20–21:40 UTC Mon–Fri
    - cron: "20 21 * * 1-5"
    - cron: "40 21 * * 1-5"

defaults:
  run:
    shell: bash

jobs:
  eod:
    name: Build and Publish EOD
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
    concurrency:
      group: dashboard-eod
      cancel-in-progress: true
    env:
      TZ: America/Phoenix
      LIVE_BRANCH: data-live-eod
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests python-dateutil

      # 1) Build sector SOURCE in daily mode (groups = {nh,nl,u,d})
      - name: Build sector source (daily)
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p data
          python -u scripts/build_outlook_source_from_polygon.py --mode daily --out data/outlook_source.json
          echo "----- RAW SOURCE (first 80 lines) -----"
          head -n 80 data/outlook_source.json || true

      # 2) Normalize guard (must contain groups or sectorCards)
      - name: Normalize source (ensure groups/sectorCards)
        run: |
          set -euo pipefail
          python - <<'PY'
          import json,sys
          p="data/outlook_source.json"
          try: j=json.load(open(p,"r",encoding="utf-8"))
          except: print("[normalize] missing source"); sys.exit(2)
          ok = isinstance(j.get("groups"),dict) or isinstance(j.get("sectorCards"),list)
          if not ok:
            print("[normalize] INVALID: missing groups/sectorCards"); sys.exit(2)
          print("[normalize] OK")
          PY

      # 3) Build EOD payload
      - name: Make EOD dashboard payload
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -euo pipefail
          python -u scripts/make_eod.py \
            --source data/outlook_source.json \
            --out data/outlook.json

      # 4) Validate EOD payload (must have 11 sectorCards and daily tiles)
      - name: Validate EOD file
        run: |
          set -euo pipefail
          python - <<'PY'
          import json,sys
          j=json.load(open("data/outlook.json","r",encoding="utf-8"))
          cards=j.get("sectorCards") or []
          need=("sector","breadth_pct","momentum_pct","nh","nl","up","down")
          ok=(len(cards)==11 and all(k in (cards[0] if cards else {}) for k in need))
          d=j.get("daily") or {}
          okd=all(k in d for k in ("trendPct","participationPct","squeezePct","volatilityPct","liquidityPct","riskOnPct"))
          if not ok or not okd:
            print("[eod] invalid:", "cards",ok, "daily",okd); sys.exit(2)
          print("[eod] OK cards=11 daily tiles present")
          PY

      # 5) Write heartbeat
      - name: Write heartbeat (eod)
        run: |
          set -euo pipefail
          date -u +'%Y-%m-%dT%H:%M:%SZ' > data/heartbeat_eod.txt

      # 6) Stage artifacts
      - name: Stage artifacts
        run: |
          set -euo pipefail
          mkdir -p /tmp/liveeod
          cp -f data/outlook.json /tmp/liveeod/outlook.json
          cp -f data/heartbeat_eod.txt /tmp/liveeod/heartbeat_eod.txt

      # 7) Prepare live branch
      - name: Prepare live branch
        run: |
          set -euo pipefail
          git config user.name "actions-bot"
          git config user.email "bot@users.noreply.github.com"
          git reset --hard
          git clean -fdx

          if git ls-remote --exit-code --heads origin "${LIVE_BRANCH}" >/dev/null 2>&1; then
            git fetch origin "${LIVE_BRANCH}"
            git checkout -B "${LIVE_BRANCH}" "origin/${LIVE_BRANCH}"
          else
            git checkout --orphan "${LIVE_BRANCH}"
          fi

          find . -mindepth 1 -maxdepth 1 ! -name ".git" -exec rm -rf {} +

          mkdir -p data
          cp -f /tmp/liveeod/outlook.json        data/outlook.json
          cp -f /tmp/liveeod/heartbeat_eod.txt  data/heartbeat_eod.txt

      # 8) Commit and push live branch
      - name: Commit and push live branch
        run: |
          set -euo pipefail
          git add data
          git commit -m "EOD live $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "nothing to commit"
          git push origin "${LIVE_BRANCH}" --force
