name: dashboard-build

on:
  schedule:
    # Market open (13:30 UTC) and close (20:30 UTC), Mon–Fri
    - cron: "30 13 * * 1-5"
    - cron: "30 20 * * 1-5"
  workflow_dispatch:

concurrency:
  group: dashboard-build
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  eod:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install minimal deps if requirements.txt missing
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            python -m pip install --upgrade pip
            pip install -q requests pandas || true
          fi

      # ---------------- FETCH ----------------
      - name: Fetch raw data (Polygon, EOD)
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          if [ -f scripts/build_outlook_source_from_polygon.py ]; then
            python -u scripts/build_outlook_source_from_polygon.py --mode eod
          else
            echo "❌ scripts/build_outlook_source_from_polygon.py missing"; exit 1
          fi

     
      - name: Guard: require fresh outlook_source.json (≥5 groups)
        run: |
          test -f data/outlook_source.json || (echo "❌ missing outlook_source.json"; exit 1)
          n=$(jq -r '[.groups | keys[]] | length' data/outlook_source.json 2>/dev/null || echo 0)
          if [ "$n" -lt 5 ]; then
            echo "❌ Too few groups ($n). Aborting build."; exit 1
          fi

      # ---------------- BUILD ----------------
      - name: Make dashboard (EOD)
        run: |
          if [ -f scripts/make_dashboard.py ]; then
            python -u scripts/make_dashboard.py --mode eod --source data/outlook_source.json --out data/outlook.json
          else
            echo "❌ scripts/make_dashboard.py missing"; exit 1
          fi

      # ---------------- NORMALIZE ----------------
      - name: Normalize sectors -> sectorCards (11)
        run: |
          if [ -f scripts/normalize_sectors.py ]; then
            python -u scripts/normalize_sectors.py --in data/outlook.json --out data/outlook.json
          else
            echo "normalize_sectors.py not found; skipping"
          fi

      # ---------------- VALIDATE ----------------
      - name: Ensure outlook.json exists
        run: test -f data/outlook.json

      - name: Validate outlook.json (no conflict markers; valid JSON)
        run: |
          if grep -E '<<<<<<<|=======|>>>>>>>' -n data/outlook.json; then
            echo "❌ Conflict markers found in data/outlook.json"; exit 1
          fi
          jq . data/outlook.json > /dev/null

      # ---------------- ARCHIVE + COMMIT ----------------
      - name: Archive (rolling) — EOD
        run: |
          mkdir -p archive/eod
          ts=$(date -u +%Y-%m-%dT%H-%M-%SZ)
          cp data/outlook.json archive/eod/outlook_${ts}.json || true
          if [ -f data/outlook_source.json ]; then
            cp data/outlook_source.json archive/eod/outlook_source_${ts}.json || true
          fi
          ls -1t archive/eod/outlook_*.json 2>/dev/null | tail -n +181 | xargs -r rm -f
          ls -1t archive/eod/outlook_source_*.json 2>/dev/null | tail -n +181 | xargs -r rm -f

      - name: Commit latest → eod archive (rebase-safe)
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add -A || true
          git diff --staged --quiet || git commit -m "EOD: refresh outlook.json [skip ci]" || true
          git pull --rebase origin main || true
          git push origin HEAD:main || true
