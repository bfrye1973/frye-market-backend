name: dashboard-10min

on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/7 12 * * 1-5"
    - cron: "*/7 13-20 * * 1-5"

defaults:
  run:
    shell: bash

jobs:
  tenmin:
    name: Build and Publish Intraday
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
    concurrency:
      group: dashboard-10min
      cancel-in-progress: true
    env:
      TZ: America/Phoenix
      LIVE_BRANCH: data-live-10min
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install requests python-dateutil

      - name: Build sectorCards source (10m)
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -e
          mkdir -p data
          python -u scripts/build_outlook_source_from_polygon.py --mode intraday10 --out data/outlook_source.json
          cp -f data/outlook_source.json /tmp/source_backup.json

      - name: Normalize source (cards or groups)
        run: |
          python - <<'PY'
          import json, sys
          p="data/outlook_source.json"
          try:
              j=json.load(open(p,"r",encoding="utf-8"))
          except Exception as e:
              print("Failed to load source:", e); sys.exit(1)
          if not (isinstance(j.get("sectorCards"), list) or isinstance(j.get("groups"), dict)):
              print("Missing sectorCards/groups in source"); sys.exit(1)
          print("OK: source has cards or groups")
          PY

      - name: Build intraday payload (uses source)
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -e
          python -u scripts/make_citysafe.py || true
          python -u scripts/make_dashboard.py \
            --mode intraday \
            --source data/outlook_source.json \
            --out data/outlook_intraday.json

      - name: Validate/Repair cards (non-fatal)
        run: |
          python - <<'PY'
          import json
          def loadp(p):
              try: return json.load(open(p,"r",encoding="utf-8"))
              except: return {}
          intraday = loadp("data/outlook_intraday.json")
          cards = intraday.get("sectorCards") or []
          if not cards:
              backup = loadp("/tmp/source_backup.json")
              if isinstance(backup.get("sectorCards"), list):
                  intraday["sectorCards"] = backup["sectorCards"]
                  json.dump(intraday, open("data/outlook_intraday.json","w",encoding="utf-8"))
                  print("Repaired: injected cards from backup.")
              else:
                  print("Warn: no cards available to repair.")
          else:
              print("Cards OK:", len(cards))
          PY

      - name: Write heartbeat
        run: |
          date -u +"%Y-%m-%dT%H:%M:%S" > data/heartbeat.txt
          echo "Heartbeat written."

      - name: Prepare live branch
        run: |
          git config --global user.email "deploy@ci.local"
          git config --global user.name "CI Deployer"

      - name: Commit and push
        run: |
          set -e
          git add -A
          git commit -m "Deploy 10m intraday ($(date -u))" || true
          git push origin ${{ env.LIVE_BRANCH }}

      - name: Done
        run: echo "10m deploy complete"
