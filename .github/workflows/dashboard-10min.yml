name: dashboard-10min

on:
  workflow_dispatch: {}
  schedule:
    # Every 7 minutes on weekdays (UTC)
    - cron: "*/7 * * * 1-5"

defaults:
  run:
    shell: bash

jobs:
  tenmin-core:
    name: Build & Publish Intraday (10m CORE)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
    concurrency:
      group: dashboard-10min-core
      cancel-in-progress: false            # never cancel; queue instead
    env:
      TZ: America/Phoenix
      LIVE_BRANCH: data-live-10min
      PYTHONUNBUFFERED: "1"
      # --- Performance tuning ---
      FD_SCALPER_ENABLE: "true"
      FD_SCALPER_LOOKBACK: "3"             # today-only, short lookback
      FD_MAX_WORKERS: "12"                 # lower to avoid 429 backoffs (tune 10–14)
      FD_RETRY_MAX: "0"                    # fail fast; post-repair keeps JSON usable

    steps:
      # ---- Market-hours guard (AZ) ----
      - name: Market hours guard (AZ)
        id: market_hours
        run: |
          TZ="America/Phoenix"
          DOW=$(TZ=$TZ date +'%u')
          HOUR=$(TZ=$TZ date +'%H')
          echo "AZ now: $(TZ=$TZ date)  (DOW=$DOW HOUR=$HOUR)"
          if [ "$DOW" -ge 6 ]; then echo "run=false" >> "$GITHUB_OUTPUT"; exit 0; fi
          if [ "$HOUR" -lt 4 ] || [ "$HOUR" -gt 18 ]; then echo "run=false" >> "$GITHUB_OUTPUT"; exit 0; fi
          echo "run=true" >> "$GITHUB_OUTPUT"

      - name: Checkout
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests python-dateutil

      - name: Build sectorCards source (10m)
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p data
          python -u scripts/build_outlook_source_from_polygon.py --mode intraday10 --out data/outlook_source.json
          cp -f data/outlook_source.json /tmp/source_backup.json
          head -n 60 data/outlook_source.json || true

      - name: Normalize source
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import json,sys
          p="data/outlook_source.json"
          try:
            j=json.load(open(p,"r",encoding="utf-8"))
          except Exception:
            print("[normalize] missing source"); sys.exit(2)
          ok = isinstance(j.get("groups"),dict) or isinstance(j.get("sectorCards"),list)
          if not ok:
            print("[normalize] INVALID source: missing groups/sectorCards"); sys.exit(2)
          print("[normalize] OK")
          PY

      - name: Build intraday payload (CORE only)
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -euo pipefail
          python -u scripts/make_dashboard.py --source data/outlook_source.json --out data/outlook_intraday.json

      - name: Validate/Repair intraday sectorCards
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import json,sys
          def loadp(p):
              try: return json.load(open(p,"r",encoding="utf-8"))
              except: return {}
          intraday = loadp("data/outlook_intraday.json")
          cards = intraday.get("sectorCards") or []
          need=("sector","breadth_pct","momentum_pct","nh","nl","up","down")
          ok=(len(cards)==11 and all(k in (cards[0] if cards else {}) for k in need))
          if not ok:
              print("[post] sectorCards invalid — attempting repair")
              src=loadp("/tmp/source_backup.json"); groups=src.get("groups") or {}
              order = ["information technology","materials","health care","communication services","real estate","energy","consumer staples","consumer discretionary","financials","utilities","industrials"]
              by={}
              for n,g in (groups or {}).items():
                  nh=int((g or {}).get("nh",0)); nl=int((g or {}).get("nl",0))
                  up=int((g or {}).get("u",0));  dn=int((g or {}).get("d",0))
                  b=0.0 if nh+nl==0 else round(100.0*nh/(nh+nl),2)
                  m=0.0 if up+dn==0 else round(100.0*up/(up+dn),2)
                  by[n.lower()]={"sector":n.title(),"breadth_pct":b,"momentum_pct":m,"nh":nh,"nl":nl,"up":up,"down":dn}
              new=[by.get(n,{"sector":n.title(),"breadth_pct":0.0,"momentum_pct":0.0,"nh":0,"nl":0,"up":0,"down":0}) for n in order]
              if len(new)==11:
                  intraday["sectorCards"]=new
                  json.dump(intraday, open("data/outlook_intraday.json","w",encoding="utf-8"), separators=(",",":"))
                  print("[post] repair applied")
              else:
                  print("[post] repair not applied (len!=11)")
          else:
              print("[post] sectorCards OK")
          PY

      - name: Stamp last_full_run_utc
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import json,datetime
          p="data/outlook_intraday.json"
          j=json.load(open(p,"r",encoding="utf-8"))
          j.setdefault("meta", {})
          j["meta"]["last_full_run_utc"] = datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")
          json.dump(j, open(p,"w",encoding="utf-8"), ensure_ascii=False, separators=(",",":"))
          print("[stamp] last_full_run_utc:", j["meta"]["last_full_run_utc"])
          PY

      - name: Write heartbeat
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        run: |
          set -euo pipefail
          date -u +'%Y-%m-%dT%H:%M:%SZ' > data/heartbeat_10min.txt

      - name: Stage artifacts
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        run: |
          set -euo pipefail
          mkdir -p /tmp/live10
          cp -f data/outlook_intraday.json /tmp/live10/outlook_intraday.json
          cp -f data/heartbeat_10min.txt   /tmp/live10/heartbeat_10min.txt

      - name: Prepare live branch
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        run: |
          set -euo pipefail
          git config user.name "actions-bot"
          git config user.email "bot@users.noreply.github.com"
          git reset --hard
          git clean -fdx
          if git ls-remote --exit-code --heads origin "${LIVE_BRANCH}" >/dev/null 2>&1; then
            git fetch origin "${LIVE_BRANCH}"
            git checkout -B "${LIVE_BRANCH}" "origin/${LIVE_BRANCH}"
          else
            git checkout --orphan "${LIVE_BRANCH}"
          fi
          find . -mindepth 1 -maxdepth 1 ! -name ".git" -exec rm -rf {} +
          mkdir -p data
          cp -f /tmp/live10/outlook_intraday.json data/outlook_intraday.json
          cp -f /tmp/live10/heartbeat_10min.txt data/heartbeat_10min.txt

      - name: Commit and push (safe)
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          LIVE_BRANCH: ${{ env.LIVE_BRANCH }}
        run: |
          set -euo pipefail
          git add data
          git commit -m "10m live $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "nothing to commit"
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"
          git push origin HEAD:refs/heads/${LIVE_BRANCH} --force

  # --------------------- ENRICH JOB (post-success) ---------------------
  tenmin-enrich:
    name: Enrich (Trend + Pills) after publish
    needs: tenmin-core
    if: ${{ always() && needs.tenmin-core.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 8
    concurrency:
      group: dashboard-10min-enrich
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests python-dateutil

      - name: Compute Lux strategy (10m)
        run: |
          set -euo pipefail
          python -u scripts/compute_trend10m.py || true

      - name: Update pills (10m always-on state)
        env:
          INTRADAY_URL: https://frye-market-backend-1.onrender.com/live/intraday
        run: |
          set -euo pipefail
          python -u scripts/update_pills_10m_state.py || true

      - name: Trigger Render deploy (backend-1)
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK_BACKEND1 }}
        run: |
          set -euo pipefail
          if [ -n "${RENDER_DEPLOY_HOOK:-}" ]; then
            echo "Triggering Render deploy..."
            curl -fsS -X POST "${RENDER_DEPLOY_HOOK}"
          else
            echo "No Render deploy hook configured. Skipping."
          fi
