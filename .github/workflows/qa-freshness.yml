name: QA – Freshness Check (10m + 5m)

on:
  schedule:
    - cron: "*/5 * * * *"   # every 5 minutes
  workflow_dispatch:

jobs:
  freshness:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    steps:
      - name: Check 10m & 5m branch freshness and auto-dispatch if stale
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            // Branch + workflow files
            const BR_10M   = "data-live-10min";
            const BR_5M    = "data-live-10min-sandbox";
            const WF_10M   = ".github/workflows/dashboard-10min.yml";
            const WF_5M    = ".github/workflows/intraday-deltas-sandbox.yml";

            // Freshness thresholds (minutes)
            const MAX_10M_AGE = 13; // allow small queue delay
            const MAX_5M_AGE  = 7;

            async function branchAgeMinutes(branch) {
              const { data } = await github.rest.repos.getBranch({ owner, repo, branch });
              const ts = new Date(data.commit.commit.committer.date).getTime();
              const ageMin = (Date.now() - ts) / 60000;
              return { ageMin, sha: data.commit.sha, tsISO: new Date(ts).toISOString() };
            }

            async function maybeDispatch(workflowFile, reason) {
              core.info(`Dispatching ${workflowFile} → main (${reason})`);
              await github.rest.actions.createWorkflowDispatch({
                owner, repo, workflow_id: workflowFile, ref: "main"
              });
            }

            const ten = await branchAgeMinutes(BR_10M);
            const five = await branchAgeMinutes(BR_5M);

            core.info(`10m branch age: ${ten.ageMin.toFixed(1)} min (sha ${ten.sha.slice(0,7)} @ ${ten.tsISO})`);
            core.info(`5m branch age: ${five.ageMin.toFixed(1)} min (sha ${five.sha.slice(0,7)} @ ${five.tsISO})`);

            let did = false;
            if (ten.ageMin > MAX_10M_AGE) {
              await maybeDispatch(WF_10M, `age ${ten.ageMin.toFixed(1)}m > ${MAX_10M_AGE}m`);
              did = true;
            }
            // 5m depends on latest 10m file; only kick if both look stale or 10m just ran
            if (five.ageMin > MAX_5M_AGE) {
              await maybeDispatch(WF_5M, `age ${five.ageMin.toFixed(1)}m > ${MAX_5M_AGE}m`);
              did = true;
            }

            core.setOutput("dispatched", did ? "yes" : "no");
