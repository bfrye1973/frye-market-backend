name: Intraday DELTAS SANDBOX (5-minute)

on:
  workflow_dispatch: {}
  # schedule:
  #   - cron: "*/5 13-20 * * 1-5"

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    concurrency:
      group: intraday-deltas-sandbox
      cancel-in-progress: false

    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set ENV
        run: |
          echo "BUILD_DIR=${RUNNER_TEMP}/intraday-deltas" >> "$GITHUB_ENV"
          mkdir -p "${RUNNER_TEMP}/intraday-deltas"
          echo "MIRROR_URL=https://frye-market-backend-1.onrender.com/live/intraday" >> "$GITHUB_ENV"

      - name: Bootstrap delta script
        run: |
          mkdir -p scripts
          cat > scripts/make_intraday_deltas.py <<'PY'
#!/usr/bin/env python3
import argparse, json, os, sys, urllib.request
from urllib.error import URLError, HTTPError
from datetime import datetime, timezone
from zoneinfo import ZoneInfo

AZ = ZoneInfo("America/Phoenix")
def az_iso(): return datetime.now(AZ).replace(microsecond=0).isoformat()

def fetch_json(url: str):
    try:
        req = urllib.request.Request(url, headers={"Cache-Control":"no-store"})
        with urllib.request.urlopen(req, timeout=20) as resp:
            if resp.status != 200: return None
            return json.loads(resp.read().decode("utf-8"))
    except: return None

def load_json_file(path: str):
    if not os.path.isfile(path): return None
    try:
        with open(path,"r",encoding="utf-8") as f: return json.load(f)
    except: return None

def safe_pct(num, den): return 0.0 if den==0 else 100.0*num/den

def summarize(cards):
    nh=nl=up=dn=0
    for c in cards or []:
        nh+=int(c.get("nh",0)); nl+=int(c.get("nl",0))
        up+=int(c.get("up",0)); dn+=int(c.get("down",0))
    return safe_pct(nh,nh+nl), safe_pct(up,up+dn)

def compute(curr, prev):
    cb, cm = summarize(curr.get("sectorCards"))
    pb, pm = summarize(prev.get("sectorCards")) if prev else (0,0)
    return {
      "market": {
        "dBreadthPct": round(cb-pb,2),
        "dMomentumPct": round(cm-pm,2),
        "netTilt": round(((cb-pb)+(cm-pm))/2,2),
        "riskOnPct": round((cb+cm)/2,2)
      }
    }

def main():
    ap=argparse.ArgumentParser()
    ap.add_argument("--mirror-url", required=True)
    ap.add_argument("--prev", default="")
    ap.add_argument("--out", required=True)
    ap.add_argument("--heartbeat", required=True)
    a=ap.parse_args()
    curr=fetch_json(a.mirror_url)
    prev=load_json_file(a.prev)
    curr=dict(curr); curr["version"]="sandbox-10m-deltas"
    curr["deltas"]=compute(curr, prev); curr["deltasUpdatedAt"]=az_iso()
    os.makedirs(os.path.dirname(a.out),exist_ok=True)
    with open(a.out,"w",encoding="utf-8") as f: json.dump(curr,f,indent=2)
    os.makedirs(os.path.dirname(a.heartbeat),exist_ok=True)
    with open(a.heartbeat,"w") as f: f.write(az_iso())
    return 0

if __name__=="__main__": sys.exit(main())
PY

      - name: Run delta script
        run: |
          python scripts/make_intraday_deltas.py \
            --mirror-url "$MIRROR_URL" \
            --prev "$BUILD_DIR/prev.json" \
            --out "$BUILD_DIR/outlook_intraday.json" \
            --heartbeat "$BUILD_DIR/heartbeat_10min.txt"

      - name: Prepare sandbox branch
        run: |
          if git ls-remote --exit-code --heads origin data-live-10min-sandbox >/dev/null 2>&1; then
            git fetch origin data-live-10min-sandbox:data-live-10min-sandbox
            git checkout data-live-10min-sandbox
            rm -rf *
          else
            git checkout --orphan data-live-10min-sandbox
            rm -rf *
          fi
          mkdir -p data

      - name: Copy outputs
        run: |
          cp "$BUILD_DIR/outlook_intraday.json" data/
          cp "$BUILD_DIR/heartbeat_10min.txt" data/

      - name: Commit & push
        run: |
          git config user.name "frye-bot"
          git config user.email "bot@users.noreply.github.com"
          git add data/*
          git commit -m "Sandbox deltas update" || true
          git push -f origin data-live-10min-sandbox
