name: Intraday DELTAS SANDBOX (5-minute)

on:
  workflow_dispatch: {}
  schedule:
    # Trading hours only, every 5 minutes, with a +2 minute offset after 10m job
    - cron: "32-59/5 12 * * 1-5"   # 12:32, 12:37, 12:42, 12:47, 12:52, 12:57 UTC
    - cron: "2-59/5 13-20 * * 1-5" # 13:02 .. 20:57 UTC

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    concurrency:
      group: intraday-deltas-sandbox
      cancel-in-progress: false
    permissions:
      contents: write

    env:
      LIVE_URL: https://frye-market-backend-1.onrender.com/live/intraday
      BRANCH:   data-live-10min-sandbox

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Set BUILD_DIR using the runner's temp dir (portable + expression-safe)
      - name: Set BUILD_DIR env
        run: |
          echo "BUILD_DIR=${RUNNER_TEMP}/intraday-deltas" >> "$GITHUB_ENV"
          mkdir -p "${RUNNER_TEMP}/intraday-deltas"

      - name: Fetch previous sandbox payload (if exists)
        run: |
          set -e
          if git ls-remote --exit-code --heads origin "$BRANCH" >/dev/null 2>&1; then
            git fetch origin "$BRANCH:$BRANCH"
            git show "origin/$BRANCH:data/outlook_intraday.json" > "$BUILD_DIR/prev.json" || true
          fi

      - name: Generate NEW sandbox payload with DELTAS (mirror + diff)
        env:
          LIVE_URL:  ${{ env.LIVE_URL }}
          BUILD_DIR: ${{ env.BUILD_DIR }}
        run: |
          python - <<'PY'
          import json, os, sys, urllib.request
          from urllib.error import URLError, HTTPError
          from datetime import datetime
          try:
              from zoneinfo import ZoneInfo
              AZ = ZoneInfo("America/Phoenix")
          except Exception:
              AZ = None

          LIVE_URL  = os.environ["LIVE_URL"]
          BUILD_DIR = os.environ["BUILD_DIR"]
          OUT = os.path.join(BUILD_DIR, "outlook_intraday.json")
          HB  = os.path.join(BUILD_DIR, "heartbeat_10min.txt")
          PREV = os.path.join(BUILD_DIR, "prev.json")

          def az_iso():
              return (datetime.now(AZ) if AZ else datetime.now()).replace(microsecond=0).isoformat()

          def fetch_json(url: str):
              try:
                  u = url + ("&t=" if "?" in url else "?t=") + str(int(datetime.utcnow().timestamp()))
                  req = urllib.request.Request(u, headers={"Cache-Control":"no-store","User-Agent":"sandbox-deltas/1.0"})
                  with urllib.request.urlopen(req, timeout=20) as resp:
                      if resp.status != 200: return None
                      return json.loads(resp.read().decode("utf-8"))
              except (URLError, HTTPError, TimeoutError, json.JSONDecodeError):
                  return None

          def load_json_file(path: str):
              try:
                  if os.path.isfile(path):
                      with open(path,"r",encoding="utf-8") as f: return json.load(f)
              except Exception:
                  pass
              return None

          def pct(num, den): return 0.0 if den == 0 else 100.0 * num / den

          def summarize(cards):
              nh = nl = up = dn = 0
              for c in cards or []:
                  nh += int(c.get("nh",0)); nl += int(c.get("nl",0))
                  up += int(c.get("up",0)); dn += int(c.get("down",0))
              return pct(nh, nh+nl), pct(up, up+dn)

          def sector_map(cards):
              m = {}
              for c in cards or []:
                  nh = int(c.get("nh",0)); nl = int(c.get("nl",0))
                  up = int(c.get("up",0)); dn = int(c.get("down",0))
                  b  = pct(nh, nh+nl); mo = pct(up, up+dn)
                  m[str(c.get("sector","Unknown"))] = (b, mo)
              return m

          curr = fetch_json(LIVE_URL)
          if not curr or not isinstance(curr, dict):
              print("ERROR: could not fetch live intraday JSON", file=sys.stderr)
              sys.exit(2)

          prev = load_json_file(PREV)

          cb, cm = summarize(curr.get("sectorCards"))
          pb, pm = summarize(prev.get("sectorCards")) if prev else (0.0, 0.0)
          d_market = {
              "dBreadthPct": round(cb - pb, 2),
              "dMomentumPct": round(cm - pm, 2),
              "netTilt": round(((cb - pb) + (cm - pm)) / 2.0, 2),
              "riskOnPct": round((cb + cm) / 2.0, 2),
          }

          curr_map = sector_map(curr.get("sectorCards"))
          prev_map = sector_map(prev.get("sectorCards")) if prev else {}
          d_sectors = {}
          for name, (b_now, m_now) in curr_map.items():
              b_prev, m_prev = prev_map.get(name, (0.0, 0.0))
              dB = round(b_now - b_prev, 2)
              dM = round(m_now - m_prev, 2)
              d_sectors[name] = {"dBreadthPct": dB, "dMomentumPct": dM, "netTilt": round((dB + dM)/2.0, 2)}

          out = dict(curr)
          out["version"] = "sandbox-10m-deltas"
          out.setdefault("meta", {})
          out["meta"]["source"] = "mirror"
          out["meta"]["sandbox"] = True
          out["deltas"] = {"market": d_market, "sectors": d_sectors}
          out["deltasUpdatedAt"] = az_iso()

          os.makedirs(BUILD_DIR, exist_ok=True)
          with open(OUT, "w", encoding="utf-8") as f:
              json.dump(out, f, ensure_ascii=False, indent=2)
          with open(HB, "w", encoding="utf-8") as f:
              f.write(az_iso() + "\n")

          print(f"[deltas] market={d_market}  wrote {OUT}")
          PY

      - name: Prepare sandbox branch (clean)
        run: |
          set -e
          BRANCH="${{ env.BRANCH }}"
          if git ls-remote --exit-code --heads origin "$BRANCH" >/dev/null 2>&1; then
            git fetch origin "$BRANCH:$BRANCH"
            git checkout "$BRANCH"
          else
            git checkout --orphan "$BRANCH"
          fi
          find . -mindepth 1 -maxdepth 1 ! -name ".git" -exec rm -rf {} +
          mkdir -p data

      - name: Copy outputs
        run: |
          set -e
          cp -f "$BUILD_DIR/outlook_intraday.json" data/outlook_intraday.json
          cp -f "$BUILD_DIR/heartbeat_10min.txt"   data/heartbeat_10min.txt
          ls -l data

      - name: Commit & push
        run: |
          set -e
          git config user.name  "frye-bot"
          git config user.email "bot@users.noreply.github.com"
          git add data/*
          git commit -m "Sandbox deltas update @ $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "nothing to commit"
          git push -f origin "${{ env.BRANCH }}"
