name: dashboard-daily

on:
  workflow_dispatch: {}
  schedule:
    # Run after market close (8:00 PM UTC â‰ˆ 4:00 PM ET)
    - cron: "0 20 * * 1-5"

defaults:
  run:
    shell: bash

jobs:
  daily:
    name: Build and Publish Daily (EOD)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: write
    concurrency:
      group: dashboard-daily
      cancel-in-progress: true
    env:
      LIVE_BRANCH: data-live-daily
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dateutil

      - name: Build daily payload
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          mkdir -p data
          python -u scripts/make_dashboard_daily.py --out data/outlook_daily.json
          echo "[ok] built data/outlook_daily.json"

      - name: Compute Lux Strategy (Daily)
        run: |
          python - <<'PY'
          import json,sys,datetime
          p="data/outlook_daily.json"
          try: j=json.load(open(p,"r",encoding="utf-8"))
          except Exception as e: print("load fail",e); sys.exit(1)
          m=j.get("metrics",{}) or {}
          now=datetime.datetime.utcnow().isoformat()+"Z"
          sq=m.get("squeeze_daily_pct") or m.get("squeeze_pct") or 50
          ema_sign=m.get("ema_sign",0)
          tight=sq>=80
          state=j.get("daily",{}).get("state") or "neutral"
          score=j.get("daily",{}).get("score",50)
          if tight: st,rs="purple",f"Squeeze tight {sq:.0f}%"
          elif state=="bull" or (ema_sign>0 and score>=60): st,rs="green",f"Daily bull {score}"
          elif state=="bear" or (ema_sign<0 and score<60): st,rs="red",f"Daily bear {score}"
          else: st,rs="purple",f"Neutral {score}"
          j.setdefault("strategy",{})["trendDaily"]={"state":st,"reason":rs,"updatedAt":now}
          json.dump(j,open(p,"w",encoding="utf-8"),separators=(",",":"))
          print("[strategy-daily]",j["strategy"]["trendDaily"])
          PY

      - name: Write heartbeat
        run: |
          date -u +'%Y-%m-%dT%H:%M:%SZ' > data/heartbeat_daily.txt

      - name: Prepare live branch
        run: |
          git config --global user.email "bot@ci.local"
          git config --global user.name  "CI Bot"
          git fetch --no-tags --depth=1 origin "${LIVE_BRANCH}" || true
          git checkout -B "${LIVE_BRANCH}" || git checkout "${LIVE_BRANCH}"

      - name: Commit and push
        run: |
          git add data/outlook_daily.json data/heartbeat_daily.txt
          git commit -m "daily feed $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "no changes"
          git push origin "${LIVE_BRANCH}" --force
