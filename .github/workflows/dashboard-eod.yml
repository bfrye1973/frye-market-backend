name: dashboard-daily

on:
  workflow_dispatch: {}
  schedule:
    # Run after market close (8PM UTC â‰ˆ 4PM ET)
    - cron: "0 20 * * 1-5"

defaults:
  run:
    shell: bash

jobs:
  daily:
    name: Build and Publish Daily (EOD)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
    concurrency:
      group: dashboard-daily
      cancel-in-progress: true
    env:
      LIVE_BRANCH: data-live-daily
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests python-dateutil

      - name: Build daily payload
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p data
          python -u scripts/make_dashboard_daily.py --out data/outlook_daily.json || true
          echo "Built data/outlook_daily.json"

      # Compute Lux Strategy (Daily)
      - name: Compute Lux strategy (Daily)
        run: |
          set -euo pipefail
          python - <<'PY'
          import json,sys,datetime
          p="data/outlook_daily.json"
          try:
              j=json.load(open(p,"r",encoding="utf-8"))
          except Exception as e:
              print("cannot load:", e); sys.exit(1)

          m=j.get("metrics",{}) or {}
          h=j.get("daily",{}) or {}
          now=j.get("updated_at") or j.get("updated_at_utc") or datetime.datetime.utcnow().isoformat()+"Z"

          # Squeeze logic
          sq = m.get("squeeze_daily_pct") or m.get("squeeze_pct") or 50
          tight = sq >= 80

          ema_sign = m.get("ema_sign",0)
          state = h.get("state") or "neutral"
          score = h.get("score",50)

          if tight:
              st, rs = "purple", f"Squeeze tight {sq:.0f}%"
          elif state=="bull" or (ema_sign>0 and score>=60):
              st, rs = "green", f"Daily bull {score}"
          elif state=="bear" or (ema_sign<0 and score<60):
              st, rs = "red", f"Daily bear {score}"
          else:
              st, rs = "purple", f"Neutral {score}"

          j.setdefault("strategy",{})
          j["strategy"]["trendDaily"]={"state":st,"reason":rs,"updatedAt":now}
          json.dump(j, open(p,"w",encoding="utf-8"), separators=(",",":"))
          print("[strategy-daily] trendDaily=", j["strategy"]["trendDaily"])
          PY

      - name: Write heartbeat
        run: |
          date -u +%Y-%m-%dT%H:%M:%SZ > data/heartbeat_daily.txt

      - name: Prepare live branch
        run: |
          set -euo pipefail
          git config --global user.email "bot@ci.local"
          git config --global user.name  "CI Bot"
          git fetch --no-tags --depth=1 origin "${LIVE_BRANCH}" || true
          git checkout -B "${LIVE_BRANCH}" || git checkout "${LIVE_BRANCH}"

      - name: Commit and push
        run: |
          set -euo pipefail
          git add data/outlook_daily.json
          git add data/heartbeat_daily.txt || true
          if git diff --cached --quiet; then
            echo "No changes"
          else
            git commit -m "daily feed: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git push origin "${LIVE_BRANCH}" --force
          fi
