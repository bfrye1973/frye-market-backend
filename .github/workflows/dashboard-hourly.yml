name: dashboard-hourly

on:
  workflow_dispatch: {}
  schedule:
    # update as needed; e.g. every 5 minutes on weekdays
    - cron: "*/5 12-23 * * 1-5"

defaults:
  run:
    shell: bash

jobs:
  hourly:
    name: Build and Publish Hourly (1h)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
    concurrency:
      group: dashboard-hourly
      cancel-in-progress: true
    env:
      TZ: America/Phoenix
      LIVE_BRANCH: data-live-hourly
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests python-dateutil

      - name: Build hourly payload
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p data
          python -u scripts/make_dashboard_hourly.py --mode intraday --out data/outlook_hourly.json
          echo "Built: data/outlook_hourly.json"

      # Compute Lux Strategy (1h)
      - name: Compute Lux strategy (1h)
        run: |
          set -euo pipefail
          python - <<'PY'
          import json,sys,datetime
          p="data/outlook_hourly.json"
          try:
              j=json.load(open(p,"r",encoding="utf-8"))
          except Exception as e:
              print("cannot load:", e); sys.exit(1)

          m=j.get("metrics",{}) or {}
          ov=(j.get("hourly",{}).get("overall1h") or {})
          now=j.get("updated_at") or j.get("updated_at_utc") or datetime.datetime.utcnow().isoformat()+"Z"

          squeeze_exp = m.get("squeeze_1h_pct")  # expansion %
          tight = (squeeze_exp is not None and squeeze_exp <= 20.0)
          score = ov.get("score",50); state = ov.get("state","neutral")

          if tight:
              st, rs = "purple", f"PSI tight (1h)"
          elif state=="bull" and score>=60:
              st, rs = "green",  f"Overall1h bull {score}"
          elif state=="bear" and score<60:
              st, rs = "red",    f"Overall1h bear {score}"
          else:
              st, rs = "purple", f"Neutral {score}"

          j.setdefault("strategy",{})
          j["strategy"]["trend1h"]={"state":st,"reason":rs,"updatedAt":now}

          json.dump(j, open(p,"w",encoding="utf-8"), separators=(",",":"))
          print("[strategy-1h] trend1h=", j["strategy"]["trend1h"])
          PY

      - name: Write heartbeat
        run: |
          date -u +%Y-%m-%dT%H:%M:%SZ > data/heartbeat_1h

      - name: Prepare live branch
        run: |
          set -euo pipefail
          git config --global user.email "bot@ci.local"
          git config --global user.name  "CI Bot"
          git fetch --no-tags --depth=1 origin "${LIVE_BRANCH}" || true
          git checkout -B "${LIVE_BRANCH}" || git checkout "${LIVE_BRANCH}"

      - name: Commit and push
        run: |
          set -euo pipefail
          git add data/outlook_hourly.json
          git add data/heartbeat_1h || true
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "1h feed: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            git push origin "${LIVE_BRANCH}" --force
          fi
