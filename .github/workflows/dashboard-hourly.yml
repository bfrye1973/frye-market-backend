name: dashboard-hourly

on:
  workflow_dispatch: {}
  schedule:
    # Run top of every hour during US market hours (13:00–20:00 UTC, Mon–Fri)
    - cron: "0 13-20 * * 1-5"

concurrency:
  group: data-writes-hourly
  cancel-in-progress: true

jobs:
  hourly:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
    env:
      TZ: America/Phoenix
      LIVE_BRANCH: data-live-hourly
      ARCHIVE_BRANCH: data-archive-hourly

    steps:
      # ---------------------- Repo Setup ----------------------
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sync refs
        run: |
          git fetch origin +refs/heads/*:refs/remotes/origin/*

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install jq

      # ---------------------- Build (Hourly) ----------------------
      - name: Build outlook source (hourly)
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -euo pipefail
          echo "[timing] build_outlook_source START $(date -u +%T)"
          # Limit runtime to 15 minutes (900s)
          timeout 900s python -u scripts/build_outlook_source_from_polygon.py --mode hourly
          echo "[timing] build_outlook_source END $(date -u +%T)"
          test -s data/outlook_source.json

      # ---------------------- Make Dashboard Payload ----------------------
      - name: Make dashboard payload (hourly)
        run: |
          set -euo pipefail
          echo "[timing] make_dashboard START $(date -u +%T)"
          python -u scripts/make_dashboard.py --mode hourly --source data/outlook_source.json --out data/outlook_hourly.json
          echo "[timing] make_dashboard END $(date -u +%T)"
          jq -r '.metrics.ema_cross as $x | "ema_cross=" + ($x//"n/a") + "  ema10_dist_pct=" + ((.metrics.ema10_dist_pct//0|tonumber)|tostring) + "  updated_at=" + ((.updated_at//.updated_at_utc//"n/a")|tostring)' data/outlook_hourly.json || true

      # ---------------------- Write Heartbeat ----------------------
      - name: Write heartbeat_hourly
        run: |
          set -e
          mkdir -p data
          date -u +'%Y-%m-%dT%H:%M:%SZ' > data/heartbeat_hourly.txt

      # ---------------------- Stage Files ----------------------
      - name: Stage files for publish
        id: prep
        run: |
          set -e
          RAW_TS=$(jq -r '.updated_at // .ts' data/outlook_hourly.json)
          TS_SAFE=$(printf '%s' "$RAW_TS" | sed 's/:/-/g')
          echo "RAW_TS=$RAW_TS"
          echo "TS_SAFE=$TS_SAFE"

          mkdir -p /tmp/live /tmp/archive/source /tmp/archive/dashboard

          # LIVE "latest"
          cp data/outlook_hourly.json /tmp/live/
          cp data/outlook_source.json  /tmp/live/
          cp data/heartbeat_hourly.txt /tmp/live/

          # ARCHIVE snapshots
          cp data/outlook_source.json "/tmp/archive/source/outlook_source_${TS_SAFE}.json"
          cp data/outlook_hourly.json "/tmp/archive/dashboard/outlook_hourly_${TS_SAFE}.json"

          echo "ts=${TS_SAFE}" >> "$GITHUB_OUTPUT"

      # ---------------------- Push LIVE branch ----------------------
      - name: Push LIVE branch (hourly)
        run: |
          set -e
          git config user.name  "actions-user"
          git config user.email "actions@github.com"

          if git show-ref --verify --quiet refs/heads/"$LIVE_BRANCH"; then
            git checkout "$LIVE_BRANCH"
          else
            git checkout --orphan "$LIVE_BRANCH"
          fi

          git rm -rf . || true
          mkdir -p data
          cp /tmp/live/* data/
          git add data
          git commit -m "HOURLY live: $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "nothing to commit (live)"
          git push origin +HEAD:"$LIVE_BRANCH"

      # ---------------------- Push ARCHIVE branch ----------------------
      - name: Push ARCHIVE branch (append)
        run: |
          set -e
          git config user.name  "actions-user"
          git config user.email "actions@github.com"

          git fetch origin "$ARCHIVE_BRANCH" || true
          if git show-ref --verify --quiet refs/heads/"$ARCHIVE_BRANCH"; then
            git checkout "$ARCHIVE_BRANCH"
          else
            git checkout -b "$ARCHIVE_BRANCH" "origin/$ARCHIVE_BRANCH" 2>/dev/null || git checkout --orphan "$ARCHIVE_BRANCH"
          fi

          mkdir -p data/archive/hourly/source data/archive/hourly/dashboard
          cp /tmp/archive/source/*    data/archive/hourly/source/    || true
          cp /tmp/archive/dashboard/* data/archive/hourly/dashboard/ || true
          git add data/archive/hourly || true
          git commit -m "HOURLY archive: ${{ steps.prep.outputs.ts }}" || echo "nothing to commit (archive)"

          git pull --rebase origin "$ARCHIVE_BRANCH" || true
          git push origin HEAD:"$ARCHIVE_BRANCH"
