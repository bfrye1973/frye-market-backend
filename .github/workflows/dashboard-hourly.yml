name: dashboard-hourly

on:
  workflow_dispatch: {}
  schedule:
    # Every 5 minutes on weekdays; guard limits work to 04:00–18:59 AZ
    - cron: "*/5 * * * 1-5"

defaults:
  run:
    shell: bash

jobs:
  hourly:
    name: Build and Publish Hourly (1h)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: write
    concurrency:
      group: dashboard-hourly
      cancel-in-progress: false
    env:
      TZ: America/Phoenix
      LIVE_BRANCH: data-live-hourly
      PYTHONUNBUFFERED: "1"
      # ---------------------------------------------
      # Enable 1h intraday sector counts (lookback L = 3 bars)
      FD_HOURLY_INTRADAY: "true"
      FD_HOURLY_LOOKBACK: "3"
      # ---------------------------------------------

    steps:
      # ---------------- Market-hours guard (AZ) ----------------
      # Allow PRE + RTH + AFTER-HOURS on weekdays: 04:00–18:59 AZ
      - name: Market hours guard (AZ)
        id: market_hours
        run: |
          TZ="America/Phoenix"
          DOW=$(TZ=$TZ date +'%u')
          HOUR=$(TZ=$TZ date +'%H')
          echo "AZ Date: $(TZ=$TZ date)"
          echo "DOW=$DOW HOUR=$HOUR"
          if [ "$DOW" -ge 6 ]; then
            echo "run=false" >> "$GITHUB_OUTPUT"
            echo "⏸ Weekend — skipping."
            exit 0
          fi
          if [ "$HOUR" -lt 4 ] || [ "$HOUR" -gt 18 ]; then
            echo "run=false" >> "$GITHUB_OUTPUT"
            echo "⏸ Outside extended hours — skipping."
            exit 0
          fi
          echo "run=true" >> "$GITHUB_OUTPUT"
          echo "✅ Within extended hours — continuing."

      - name: Checkout
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests python-dateutil

      # 1) Build hourly source (groups {nh,nl,u,d} by sector)
      - name: Build sectorCards source (1h)
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p data
          python -u scripts/build_outlook_source_from_polygon.py --mode hourly --out data/outlook_source.json
          echo "----- RAW SOURCE (first 80 lines) -----"
          head -n 80 data/outlook_source.json || true

      # 2) Normalize / validate source
      - name: Normalize sector source
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import json,sys
          p="data/outlook_source.json"
          try:
            j=json.load(open(p,"r",encoding="utf-8"))
          except Exception:
            print("[normalize] missing outlook_source.json"); sys.exit(2)
          ok = isinstance(j.get("groups"),dict) or isinstance(j.get("sectorCards"),list)
          if not ok:
            print("[normalize] INVALID source: missing groups/sectorCards"); sys.exit(2)
          print("[normalize] OK")
          PY

      # 3) Compose /live/hourly from source
      - name: Build hourly payload
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p data
          # NOTE: pass the source; do not pass --mode
          python -u scripts/make_dashboard_hourly.py \
            --source data/outlook_source.json \
            --out data/outlook_hourly.json
          echo "✔ Built data/outlook_hourly.json"
          head -n 40 data/outlook_hourly.json || true

      # 3.5) Validate sectorCards presence
      - name: Validate hourly sectorCards
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import json,sys
          j=json.load(open("data/outlook_hourly.json","r",encoding="utf-8"))
          cards=j.get("sectorCards") or []
          need=("sector","breadth_pct","momentum_pct","nh","nl","up","down")
          ok=(len(cards)==11 and all(k in (cards[0] if cards else {}) for k in need))
          if not ok:
            print("[hourly] sectorCards missing or invalid. Found:", len(cards))
            sys.exit(2)
          print("[hourly] sectorCards OK:", len(cards))
          PY

      # 4) Compute Lux strategy (1h)
      - name: Compute Lux strategy (1h)
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        run: |
          set -euo pipefail
          python -u scripts/compute_trend_hourly.py

      # 4.5) NEW — Always-on state pills (1h)
      - name: Update pills (1h always-on state)
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        env:
          HOURLY_URL: https://frye-market-backend-1.onrender.com/live/hourly
        run: |
          set -euo pipefail
          python -u scripts/update_pills_1h_state.py

      # 5) Write heartbeat
      - name: Write heartbeat
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        run: |
          set -euo pipefail
          date -u +"%Y-%m-%dT%H:%M:%SZ" > data/heartbeat_1h
          echo "Heartbeat written."

      # 6) Prepare git identity
      - name: Prepare git identity
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        run: |
          set -euo pipefail
          git config user.email "bot@ci.local"
          git config user.name  "CI Bot"

      # 7) Commit and push (detached-HEAD safe)
      - name: Commit and push
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          LIVE_BRANCH: ${{ env.LIVE_BRANCH }}
        run: |
          set -euo pipefail
          git add data/outlook_hourly.json data/heartbeat_1h || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "hourly feed: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"
            git push origin HEAD:refs/heads/${LIVE_BRANCH} --force
          fi

      # 8) Trigger Render deploy (optional)
      - name: Trigger Render deploy (backend-1)
        if: ${{ steps.market_hours.outputs.run == 'true' && success() }}
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK_BACKEND1 }}
        run: |
          set -euo pipefail
          if [ -n "${RENDER_DEPLOY_HOOK:-}" ]; then
            echo "Triggering Render deploy..."
            curl -fsS -X POST "${RENDER_DEPLOY_HOOK}"
          else
            echo "No Render deploy hook configured. Skipping."
          fi

      - name: Done
        if: ${{ steps.market_hours.outputs.run == 'true' }}
        run: echo "Hourly deploy complete"
