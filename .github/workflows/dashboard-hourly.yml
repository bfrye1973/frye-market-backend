name: dashboard-hourly

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * 1-5"   # top of every hour Monâ€“Fri (UTC)

jobs:
  hourly:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TZ: America/New_York

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Market-hours gate (skips scheduled runs outside 9â€“16 ET)
      - name: Skip if outside market hours (scheduled runs only)
        id: gate
        if: github.event_name == 'schedule'
        run: |
          hour=$(date +%H)   # ET (TZ set above)
          dow=$(date +%u)    # 1=Mon..7=Sun
          if [ "$dow" -ge 6 ]; then echo "skip=true" >> $GITHUB_OUTPUT; exit 0; fi
          if [ "$hour" -lt 9 ] || [ "$hour" -gt 16 ]; then echo "skip=true" >> $GITHUB_OUTPUT; fi

      - name: Build outlook source (intraday)
        if: ${{ github.event_name != 'schedule' || steps.gate.outputs.skip != 'true' }}
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          python scripts/build_outlook_source_from_polygon.py --mode intraday

      - name: Make dashboard payload
        if: ${{ github.event_name != 'schedule' || steps.gate.outputs.skip != 'true' }}
        env:
          PIPELINE_TAG: "hourly"
        run: |
          python scripts/make_dashboard.py --source data/outlook_source.json --out data/outlook.json

           # ðŸ‘€ Lightweight peek step (logs sector info + computed numbers, never fails)
      - name: Peek sector snapshot
        if: ${{ github.event_name != 'schedule' || steps.gate.outputs.skip != 'true' }}
        run: |
          echo "===== SNAPSHOT ====="
          date -u +"UTC time: %Y-%m-%dT%H:%M:%SZ"

          echo "--- Sector count ---"
          jq '[.outlook.sectors | keys[]] | length' data/outlook.json 2>/dev/null || echo "no sectors"

          echo "--- Sector details (first 10) ---"
          jq -r '
            .outlook.sectors
            | to_entries[0:10]
            | .[]
            | "\(.key): outlook=\(.value.outlook // "N/A"), netNH=\(.value.netNH // "N/A")"
          ' data/outlook.json 2>/dev/null || echo "no details"

          echo "--- All sector names ---"
          jq -r '.outlook.sectors | keys[]' data/outlook.json 2>/dev/null || echo "no sector names"

          echo "===================="


      - name: Archive (15-day rolling) â€” HOURLY
        if: ${{ github.event_name != 'schedule' || steps.gate.outputs.skip != 'true' }}
        run: |
          set -e
          TS=$(date -u +'%Y-%m-%dT%H-%M-%SZ')
          mkdir -p data/archive/hourly/source data/archive/hourly/dashboard
          cp data/outlook_source.json "data/archive/hourly/source/outlook_source_${TS}.json"
          cp data/outlook.json        "data/archive/hourly/dashboard/outlook_${TS}.json"
          find data/archive/hourly/source    -type f -name 'outlook_source_*.json' -mtime +15 -delete || true
          find data/archive/hourly/dashboard -type f -name 'outlook_*.json'        -mtime +15 -delete || true

      - name: Commit latest + hourly archive (rebase-safe)
        if: ${{ github.event_name != 'schedule' || steps.gate.outputs.skip != 'true' }}
        run: |
          set -e
          git config user.name  "github-actions"
          git config user.email "actions@github.com"

          git fetch origin main
          git checkout main
          git pull --rebase --autostash origin main

          git add data/outlook.json data/outlook_source.json data/archive/hourly || true

          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git commit -m "HOURLY refresh & archive: $(date -u +'%Y-%m-%dT%H-%M-%SZ')"

          if ! git push origin HEAD:main; then
            echo "Push rejected; rebasing once more..."
            git pull --rebase --autostash origin main
            git push origin HEAD:main
          fi
