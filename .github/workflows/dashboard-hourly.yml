name: dashboard-hourly

on:
  workflow_dispatch: {}
  schedule:
    # Optional: every 5 minutes, weekdays
    - cron: "*/5 12-23 * * 1-5"

defaults:
  run:
    shell: bash

jobs:
  hourly:
    name: Build and Publish Hourly (1h)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: write
    concurrency:
      group: dashboard-hourly
      cancel-in-progress: true
    env:
      LIVE_BRANCH: data-live-hourly
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests python-dateutil

      - name: Build hourly payload
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p data
          python -u scripts/make_dashboard_hourly.py --out data/outlook_hourly.json
          echo "✔ Built data/outlook_hourly.json"

      - name: Compute Lux strategy (1h)
        run: |
          set -euo pipefail
          python - <<'PY'
          import json, datetime, sys
          p = "data/outlook_hourly.json"
          try:
              with open(p, "r", encoding="utf-8") as f:
                  j = json.load(f)
          except Exception as e:
              print("load fail:", e); sys.exit(1)

          m  = j.get("metrics", {}) or {}
          hv = j.get("hourly", {}) or {}
          ov = hv.get("overall1h", {}) or {}
          now = j.get("updated_at") or j.get("updated_at_utc") or datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")

          sq = m.get("squeeze_1h_pct")
          tight = (sq is not None) and float(sq) >= 80.0

          ema_sign = int(m.get("ema_sign", 0) or 0)
          score    = int(ov.get("score", 50) or 50)
          state    = (ov.get("state") or "neutral").lower()

          if tight:
              st, rs = "purple", f"PSI ≥80 ({sq:.0f}%)"
          elif state == "bull" or (ema_sign > 0 and score >= 60):
              st, rs = "green", f"Overall1h {score}"
          elif state == "bear" or (ema_sign < 0 and score < 60):
              st, rs = "red", f"Overall1h {score}"
          else:
              st, rs = "purple", f"Neutral {score}"

          j.setdefault("strategy", {})
          j["strategy"]["trend1h"] = {"state": st, "reason": rs, "updatedAt": now}

          with open(p, "w", encoding="utf-8") as f:
              json.dump(j, f, ensure_ascii=False, separators=(",", ":"))
          print("[strategy-1h]", j["strategy"]["trend1h"])
          PY

      - name: Write heartbeat
        run: |
          set -euo pipefail
          date -u +"%Y-%m-%dT%H:%M:%SZ" > data/heartbeat_1h
          echo "Heartbeat written."

      - name: Prepare git identity
        run: |
          set -euo pipefail
          git config user.email "bot@ci.local"
          git config user.name  "CI Bot"

      # ✅ SAFE PUBLISH: push current HEAD to remote live branch (works in detached HEAD)
      - name: Commit and push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          git add data/outlook_hourly.json data/heartbeat_1h || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else:
            git commit -m "hourly feed: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"
            git push origin HEAD:refs/heads/${LIVE_BRANCH} --force
          fi
