name: dashboard-hourly

on:
  workflow_dispatch: {}
  schedule:
    - cron: "5 13-21 * * 1-5"
    - cron: "35 12 * * 1-5"

defaults:
  run:
    shell: bash

jobs:
  hourly:
    name: Build and Publish Hourly
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
    concurrency:
      group: dashboard-hourly
      cancel-in-progress: true
    env:
      TZ: America/Phoenix
      LIVE_BRANCH: data-live-hourly
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests python-dateutil

      - name: Build sectorCards source (1h)
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p data
          python -u scripts/build_outlook_source_from_polygon.py --mode hourly --out data/outlook_source.json || true
          echo "----- RAW SOURCE (first 80 lines) -----" || true
          head -n 80 data/outlook_source.json || true

      - name: Normalize sectorCards source
        run: |
          set -euo pipefail
          python - <<'PY'
          import json
          PATH = "data/outlook_source.json"
          try:
            j = json.load(open(PATH, "r", encoding="utf-8"))
          except Exception:
            j = {}
          def num(x):
            try: return float(x)
            except: return None
          candidates = []
          if isinstance(j, dict):
            if isinstance(j.get("sectorCards"), list): candidates = j["sectorCards"]
            elif isinstance(j.get("data",{}).get("sectorCards"), list): candidates = j["data"]["sectorCards"]
            elif isinstance(j.get("sectors"), list): candidates = j["sectors"]
            elif isinstance(j.get("cards"), list): candidates = j["cards"]
          def to_card(c):
            sector = c.get("sector") or c.get("name") or c.get("label")
            if not sector: return None
            bp = c.get("breadth_pct", c.get("breadth", c.get("breadthPercent")))
            mp = c.get("momentum_pct", c.get("momentum", c.get("momentumPercent")))
            nh = int(c.get("nh", c.get("newHighs")  ) or 0)
            nl = int(c.get("nl", c.get("newLows")   ) or 0)
            up = int(c.get("up", c.get("advancers") ) or 0)
            dn = int(c.get("down", c.get("decliners", c.get("dn"))) or 0)
            bp = num(bp); mp = num(mp)
            if bp is None:
              den = nh+nl; bp = (100.0*nh/den) if den else 0.0
            if mp is None:
              den = up+dn; mp = (100.0*up/den) if den else 0.0
            return {"sector": str(sector), "breadth_pct": bp, "momentum_pct": mp, "nh": nh, "nl": nl, "up": up, "down": dn}
          normalized=[]
          for c in (candidates or []):
            try:
              nc = to_card(c)
              if nc: normalized.append(nc)
            except: pass
          ORDER=["information technology","materials","health care","communication services","real estate","energy","consumer staples","consumer discretionary","financials","utilities","industrials"]
          def norm(s): return (s or "").strip().lower()
          alias={"healthcare":"health care","health-care":"health care","info tech":"information technology","technology":"information technology","tech":"information technology","communications":"communication services","comm services":"communication services","telecom":"communication services","staples":"consumer staples","discretionary":"consumer discretionary","finance":"financials","industry":"industrials","reit":"real estate","reits":"real estate"}
          bykey={}
          for c in normalized:
            k = alias.get(norm(c["sector"]), norm(c["sector"]))
            if k not in bykey:
              c2=c.copy(); c2["sector"]=k.title(); bykey[k]=c2
            else:
              a,b=bykey[k],c
              a["nh"]+=b["nh"]; a["nl"]+=b["nl"]; a["up"]+=b["up"]; a["down"]+=b["down"]
              den=a["nh"]+a["nl"]; a["breadth_pct"]=(100.0*a["nh"]/den) if den else 0.0
              den=a["up"]+a["down"]; a["momentum_pct"]=(100.0*a["up"]/den) if den else 0.0
          sectorCards=[]
          for name in ORDER:
            if name in bykey: sectorCards.append(bykey[name])
            else: sectorCards.append({"sector":name.title(),"breadth_pct":0.0,"momentum_pct":0.0,"nh":0,"nl":0,"up":0,"down":0})
          json.dump({"sectorCards":sectorCards}, open(PATH,"w",encoding="utf-8"), separators=(",",":"))
          print(f"[normalize] sectorCards={len(sectorCards)} IT_b={sectorCards[0]['breadth_pct']:.2f} IT_m={sectorCards[0]['momentum_pct']:.2f}")
          PY

      - name: Validate sectorCards source
        run: |
          set -euo pipefail
          python - <<'PY'
          import json, sys
          j=json.load(open("data/outlook_source.json","r",encoding="utf-8"))
          cards=j.get("sectorCards") or []
          need=("sector","breadth_pct","momentum_pct","nh","nl","up","down")
          ok=(len(cards)==11 and all(k in cards[0] for k in need))
          if not ok:
            print(f"[sectors] INVALID source: cards={len(cards)} need={need}")
            sys.exit(2)
          print(f"[sectors] OK cards=11 | IT b={cards[0]['breadth_pct']} m={cards[0]['momentum_pct']}")
          PY

      - name: Assert sectorCards not-all-zero (env flag)
        run: |
          set -euo pipefail
          ALL_ZERO=$(python - <<'PY'
          import json
          j=json.load(open("data/outlook_source.json","r",encoding="utf-8"))
          cards=j.get("sectorCards") or []
          total=sum((c.get("nh",0)+c.get("nl",0)+c.get("up",0)+c.get("down",0)) for c in cards)
          print("true" if total==0 else "false")
          PY
          )
          echo "[sectors] ALL_ZERO=${ALL_ZERO}"
          echo "ALL_ZERO=${ALL_ZERO}" >> "$GITHUB_ENV"

      - name: Fallback hydrate from intraday when zeros
        if: env.ALL_ZERO == 'true'
        run: |
          set -euo pipefail
          echo "[sectors] Hydrating from /live/intraday because hourly source sums to zeroâ€¦"
          curl -fsSL "https://frye-market-backend-1.onrender.com/live/intraday?t=$(date +%s)" -o /tmp/intraday.json
          python - <<'PY'
          import json, sys
          h=json.load(open("/tmp/intraday.json","r",encoding="utf-8"))
          cards=h.get("sectorCards") or []
          if len(cards)!=11:
            print("[fallback] intraday invalid; keeping zeros")
            sys.exit(0)
          out={"sectorCards":[]}
          for c in cards:
            out["sectorCards"].append({
              "sector": c.get("sector"),
              "breadth_pct": float(c.get("breadth_pct",0) or 0),
              "momentum_pct": float(c.get("momentum_pct",0) or 0),
              "nh": int(c.get("nh",0) or 0),
              "nl": int(c.get("nl",0) or 0),
              "up": int(c.get("up",0) or 0),
              "down": int(c.get("down",0) or 0),
            })
          json.dump(out, open("data/outlook_source.json","w",encoding="utf-8"), separators=(",",":"))
          print("[fallback] wrote data/outlook_source.json from intraday")
          PY

      - name: Build hourly payload
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p data
          python -u scripts/make_dashboard.py \
            --mode hourly \
            --source data/outlook_source.json \
            --out data/outlook_hourly.json

      - name: Write heartbeat (hourly)
        run: |
          set -euo pipefail
          date -u +'%Y-%m-%dT%H:%M:%SZ' > data/heartbeat_hourly.txt

      - name: Stage artifacts
        run: |
          set -euo pipefail
          mkdir -p /tmp/live1h
          cp -f data/outlook_hourly.json /tmp/live1h/outlook_hourly.json
          cp -f data/heartbeat_hourly.txt /tmp/live1h/heartbeat_hourly.txt

      - name: Prepare live branch
        run: |
          set -euo pipefail
          git config user.name "actions-bot"
          git config user.email "bot@users.noreply.github.com"
          git reset --hard
          git clean -fdx

          if git ls-remote --exit-code --heads origin "${LIVE_BRANCH}" >/dev/null 2>&1; then
            git fetch origin "${LIVE_BRANCH}"
            git checkout -B "${LIVE_BRANCH}" "origin/${LIVE_BRANCH}"
          else
            git checkout --orphan "${LIVE_BRANCH}"
          fi

          find . -mindepth 1 -maxdepth 1 ! -name ".git" -exec rm -rf {} +

          mkdir -p data
          cp -f /tmp/live1h/outlook_hourly.json   data/outlook_hourly.json
          cp -f /tmp/live1h/heartbeat_hourly.txt data/heartbeat_hourly.txt

      - name: Commit and push live branch
        run: |
          set -euo pipefail
          git add data
          git commit -m "1h live $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "nothing to commit"
          git push origin "${LIVE_BRANCH}" --force
