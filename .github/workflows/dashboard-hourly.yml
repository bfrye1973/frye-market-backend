name: dashboard-hourly

on:
  workflow_dispatch: {}
  schedule:
    # RTH passes (13â€“21 UTC) + 12:35 warmup
    - cron: "5 13-21 * * 1-5"
    - cron: "35 12 * * 1-5"

defaults:
  run:
    shell: bash

jobs:
  hourly:
    name: Build and Publish Hourly
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
    concurrency:
      group: dashboard-hourly
      cancel-in-progress: false
    env:
      TZ: America/Phoenix
      LIVE_BRANCH: data-live-hourly
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: false

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests python-dateutil

      # Build hourly sectorCards source (optional if you already produce it)
      - name: Build sectorCards source (1h)
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p data
          python -u scripts/build_outlook_source_from_polygon.py --mode hourly --out data/outlook_source.json || true
          head -n 60 data/outlook_source.json || true

      - name: Normalize sectorCards source
        run: |
          set -euo pipefail
          python - <<'PY'
          import json,sys
          p="data/outlook_source.json"
          try:
            j=json.load(open(p,"r",encoding="utf-8"))
          except Exception:
            j={}
          # accept sectorCards/sectors/cards; keep as-is (hourly builder can consume any of those)
          if not isinstance(j,dict):
            print("[normalize] invalid source dict"); sys.exit(2)
          ok = any(isinstance(j.get(k), list) for k in ("sectorCards","sectors","cards"))
          if not ok:
            print("[normalize] missing sector list"); sys.exit(2)
          print("[normalize] OK")
          PY

      - name: Validate sectorCards source
        run: |
          set -euo pipefail
          python - <<'PY'
          import json,sys
          j=json.load(open("data/outlook_source.json","r",encoding="utf-8"))
          cards=None
          for k in ("sectorCards","sectors","cards"):
            v=j.get(k)
            if isinstance(v,list): cards=v; break
          if cards is None:
            print("[validate] no cards list"); sys.exit(2)
          print(f"[validate] cards_found={len(cards)} (ok if 11; may be 0 before market)")
          PY

      - name: Build hourly payload
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p data
          python -u scripts/make_dashboard_hourly.py \
            --source data/outlook_source.json \
            --out    data/outlook_hourly.json

      - name: Finalize v1-hourly (enforce & mirror)
        run: |
          set -euo pipefail
          python -u scripts/finalize_hourly_v1.py --in data/outlook_hourly.json --out data/outlook_hourly.json
          python - <<'PY'
          import json
          j=json.load(open("data/outlook_hourly.json","r",encoding="utf-8"))
          m=j.get("metrics",{}); h=j.get("hourly",{})
          print("[snapshot:1h]", {
            "breadth_1h": m.get("breadth_1h_pct"),
            "A_fast": m.get("breadth_align_1h_pct_fast"),
            "B_fast": m.get("breadth_bar_1h_pct_fast"),
            "momentum_combo_1h": m.get("momentum_combo_1h_pct"),
            "squeeze_1h": m.get("squeeze_1h_pct"),
            "liq_1h": m.get("liquidity_1h"),
            "vol_1h_scaled": m.get("volatility_1h_scaled"),
            "overall1h": h.get("overall1h")
          })
          PY

      - name: Write heartbeat (hourly)
        run: |
          set -euo pipefail
          date -u +'%Y-%m-%dT%H:%M:%SZ' > data/heartbeat_hourly.txt

      - name: Stage artifacts
        run: |
          set -euo pipefail
          mkdir -p /tmp/live1h
          cp -f data/outlook_hourly.json   /tmp/live1h/outlook_hourly.json
          cp -f data/heartbeat_hourly.txt  /tmp/live1h/heartbeat_hourly.txt

      - name: Prepare live branch
        run: |
          set -euo pipefail
          git config user.name "actions-bot"
          git config user.email "bot@users.noreply.github.com"
          git reset --hard
          git clean -fdx
          if git ls-remote --exit-code --heads origin "${LIVE_BRANCH}" >/dev/null 2>&1; then
            git fetch origin "${LIVE_BRANCH}"
            git checkout -B "${LIVE_BRANCH}" "origin/${LIVE_BRANCH}"
          else
            git checkout --orphan "${LIVE_BRANCH}"
          fi
          find . -mindepth 1 -maxdepth 1 ! -name ".git" -exec rm -rf {} +
          mkdir -p data
          cp -f /tmp/live1h/outlook_hourly.json   data/outlook_hourly.json
          cp -f /tmp/live1h/heartbeat_hourly.txt data/heartbeat_hourly.txt

      - name: Commit and push live branch
        run: |
          set -euo pipefail
          git add data
          git commit -m "1h live $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "nothing to commit"
          git push origin "${LIVE_BRANCH}" --force
