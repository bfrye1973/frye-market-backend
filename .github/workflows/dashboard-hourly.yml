name: dashboard-hourly

on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/5 * * * 1-5"  # every 5 minutes on weekdays (UTC)

defaults:
  run:
    shell: bash

jobs:
  hourly:
    name: Build & Publish Hourly (1h context, long lookbacks)
    runs-on: ubuntu-latest
    timeout-minutes: 8
    permissions:
      contents: write
    concurrency:
      group: dashboard-hourly
      allow-cancel-in-progress: true
      cancel-in-progress: true
    env:
      TZ: America/Phoenix
      LIVE_BRANCH: data-live-hourly
      PYTHONUNBUFFERED: "1"

      # builder knobs
      HOUR_LOOKBACK_DAYS: "14"         # 10â€“20 trading days of 1h bars
      H4_LOOKBACK_DAYS: "30"           # for SMI 4h component
      EMA_FAST: "8"
      EMA_SLOW: "18"
      VOL_FAST: "3"
      VOL_SLOW: "12"

      # polygon source concurrency
      FD_MAX_WORKERS: "8"
      FD_RETRY_MAX: "0"

    steps:
      - name: Show AZ time
        run: echo "AZ now: $(TZ=America/Phoenix date)"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # --- OPTIONAL: only if your Python scripts import 'requests'.
      # - uses: actions/setup-python@v4
      #   with:
      #     python-version: "3.11"
      #     cache: "pip"
      # - name: Install Python deps (optional)
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install requests

      - name: Build sectorCards source (1h)
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
          FD_MAX_WORKERS: ${{ env.FD_MAX_WORKERS }}
          FD_RETRY_MAX: ${{ env.FD_RETRY_MAX }}
        run: |
          set -euo pipefail
          mkdir -p data
          python -u scripts/build_outlook_source_from_polygon.py \
            --mode hourly \
            --out data/outlook_source.json

      - name: Normalize sectorCards source
        run: |
          set -euo pipefail
          python - <<'PY'
          import json,sys
          p="data/outlook_source.json"
          try:
              doc=json.load(open(p,"r",encoding="utf-8"))
          except Exception as e:
              print("normalize: missing/invalid source:", e); sys.exit(2)
          ok = isinstance(doc.get("sectorCards"), list) or isinstance(doc.get("groups"), dict)
          if not ok:
              print("normalize: no sectorCards or groups in source"); sys.exit(2)
          if "sectorCards" not in doc:
              groups = doc.get("groups") or {}
              alias = {
                  "healthcare":"health care","health-care":"health care",
                  "info tech":"information technology","technology":"information technology","tech":"information technology",
                  "communications":"communication services","comm":"communication services",
                  "staples":"consumer staples","discretionary":"consumer discretionary",
                  "reit":"real estate","industry":"industrials"
              }
              order = ["information technology","materials","health care","communication services",
                       "real estate","energy","consumer staples","consumer discretionary",
                       "financials","utilities","industrials"]
              def norm(s): return (s or "").strip().lower()
              out=[]
              for name in order:
                  k = alias.get(norm(name), norm(name))
                  g = groups.get(k, {})
                  nh=int(g.get("nh",0)); nl=int(g.get("nl",0)); up=int(g.get("u",0)); dn=int(g.get("d",0))
                  b = 0.0 if nh+nl==0 else round(100.0*nh/(nh+nl),2)
                  m = 0.0 if up+dn==0 else round(100.0*up/(up+dn),2)
                  out.append({"sector":name.title(),"breadth_pct":b,"momentum_pct":m,"nh":nh,"nl":nl,"up":up,"down":dn})
              doc = {"sectorCards": out}
          json.dump(doc, open(p,"w",encoding="utf-8"), ensure_ascii=False)
          print("normalize: sectorCards:", len(doc["sectorCards"]))
          PY

      - name: Build hourly payload (EMA/SMI/PSI/vol/squeeze/riskOn)
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
          HOUR_LOOKBACK_DAYS: ${{ env.HOUR_LOOKBACK_DAYS }}
          H4_LOOKBACK_DAYS: ${{ env.H4_LOOKBACK_DAYS }}
          EMA_FAST: ${{ env.EMA_FAST }}
          EMA_SLOW: ${{ env.EMA_SLOW }}
          VOL_FAST: ${{ env.VOL_FAST }}
          VOL_SLOW: ${{ env.VOL_SLOW }}
        run: |
          set -euo pipefail
          mkdir -p data
          python -u scripts/make_dashboard_hourly.py \
            --source data/outlook_source.json \
            --out    data/outlook_hourly.json

      - name: Compute Lux strategy (1h)
        run: |
          set -euo pipefail
          python -u scripts/compute_trend_hourly.py

      - name: Validate hourly payload
        run: |
          set -euo pipefail
          python - <<'PY'
          import json,sys
          j=json.load(open("data/outlook_hourly.json","r",encoding="utf-8"))
          m=j.get("metrics") or {}
          must = [
              "breadth_1h_pct",
              "momentum_1h_sales_pct" if False else "momentum_1h_pct",
              "momentum_combo_1h_pct",
              "squeeze_1h_pct",
              "liquidity_1h",
              "volatility_1h_pct",
              "volatility_1h_scaled"
          ]
          missing=[k for k in must if k not in m]
          if missing:
              print("validate: missing metrics:", missing); sys.exit(2)
          h=j.get("hourly") or {}
          sig=h.get("signals") or {}
          for k in ("sigOverall1h","sigEMA1h","sigSMI1h"):
              if k not in sig or "state" not in sig[k]:
                  print("validate: missing hourly signal:", k); sys.exit(2)
          print("validate: OK")
          PY

      - name: Write heartbeat
        run: |
          set -euo pipefail
          date -u +"%Y-%m-%dT%H:%M:%SZ" > data/heartbeat_1h

      - name: Detect change vs remote
        id: changed
        env:
          LIVE_BRANCH: ${{ env.LIVE_BRANCH }}
        run: |
          set -euo pipefail
          CHANGED="true"
          if git ls-remote --exit-code --heads origin "${LIVE_BRANCH}" >/dev/null 2>&1; then
            git fetch --no-tags --depth=1 origin "${LIVE_BRANCH}"
            git show "origin/${LIVE_BRANCH}:data/outlook_hourly.json" > /tmp/prev.json || true
            if [ -s /tmp/prev.json ] && cmp -s data/outlook_hourly.json /tmp/prev.json; then
              CHANGED="false"
            fi
          fi
          echo "changed=${CHANGED}" >> "$GITHUB_OUTPUT"
          echo "diff: changed=${CHANGED}"

      - name: Publish live branch
        if: ${{ steps.changed.outputs.changed == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          LIVE_BRANCH: ${{ env.LIVE_BRANCH }}
        run: |
          set -euo pipefail
          git config user.email "bot@ci.local"
          git config user.name  "CI Bot"
          git add data/outlook_hourly.json data/heartbeat_1h
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "hourly publish $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"
            git push origin HEAD:refs/heads/${LIVE_BRANCH} --force
          fi

      - name: Done
        run: echo "Hourly build complete"
