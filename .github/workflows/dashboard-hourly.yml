name: dashboard-hourly

on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/5 * * * 1-5"

defaults:
  run:
    shell: bash

jobs:
  hourly:
    name: Build & Publish Hourly (1h context, long lookbacks)
    runs-on: ubuntu-latest
    timeout-minutes: 12
    permissions:
      contents: write
    concurrency:
      group: dashboard-hourly
      cancel-in-progress: true
    env:
      TZ: "America/Phoenix"
      LIVE_BRANCH: "data-live-hourly"
      PYTHONUNBUFFERED: "1"
      HOUR_LOOKBACK_DAYS: "14"
      H4_LOOKBACK_DAYS: "30"
      EMA_FAST: "8"
      EMA_SLOW: "18"
      VOL_FAST: "3"
      VOL_SLOW: "12"
      FD_MAX_WORKERS: "8"
      FD_RETRY_MAX: "0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # If your Python scripts import "requests", uncomment the next two steps.
      # - name: Setup Python (optional)
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: "3.11"
      #     cache: "pip"
      # - name: Install deps (optional)
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install requests

      - name: Build sectorCards source (1h)
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
          FD_MAX_WORKERS: ${{ env.FD_MAX_WORKERS }}
          FD_RETRY_MAX: ${{ env.FD_RETRY_MAX }}
        run: |
          set -euo pipefail
          mkdir -p data
          python -u scripts/build_outlook_source_from_polygon.py --mode hourly --out data/outlook_source.json

      - name: Normalize sectorCards source
        run: |
          python - <<'PY'
          import json, sys
          src = "data/outlook_source.json"
          try:
            doc = json.load(open(src, "r", encoding="utf-8"))
          except Exception as e:
            print("invalid source:", e); sys.exit(1)
          if isinstance(doc.get("sectorCards"), list):
            out = {"sectorCards": doc["sectorCards"]}
          elif isinstance(doc.get("groups"), dict):
            groups = doc["groups"]
            alias = {
              "healthcare":"health care","health-care":"health care",
              "info tech":"information technology","technology":"information technology","tech":"information technology",
              "communications":"communication services","comm":"communication services",
              "staples":"consumer staples","discretionary":"consumer discretionary",
              "reit":"real estate","industry":"industrials"
            }
            order = ["information technology","materials","health care","communication services",
                     "real estate","energy","consumer staples","consumer discretionary",
                     "financials","utilities","industrials"]
            def norm(s): return (s or "").strip().lower()
            rows = []
            for name in order:
              k = alias.get(norm(name), norm(name))
              g = groups.get(k, {})
              nh = int(g.get("nh",0)); nl = int(g.get("nl",0)); up = int(g.get("u",0)); dn = int(g.get("d",0))
              b = 0.0 if nh+nl == 0 else round(100.0*nh/(nh+nl), 2)
              m = 0.0 if up+dn == 0 else round(100.0*up/(up+dn), 2)
              rows.append({"sector": name.title(), "breadth_pct": b, "momentum_pct": m, "nh": nh, "nl": nl, "up": up, "down": dn})
            out = {"lifecycles": 0, "sectorCards": rows}
          else:
            print("missing sectorCards/groups"); sys.exit(1)
          json.dump(out, open(src, "w", encoding="utf-8"), ensure_ascii=False)
          print("sectorCards:", len(out["sectorCards"]))
          PY

      - name: Build hourly payload (1h + 4h long lookbacks)
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
          HOUR_LOOKBACK_DAYS: ${{ env.HOUR_LOOKBACK_DAYS }}
          H4_LOOKBACK_DAYS: ${{ env.H4_LOOKBACK_DAYS }}
          EMA_FAST: ${{ env.EMA_FAST }}
          EMA_SLOW: ${{ env.EMA_SLOW }}
          VOL_FAST: ${{ env.VOL_FAST }}
          VOL_SLOW: ${{ env.VOL_SLOW }}
        run: |
          set -euo pipefail
          mkdir -p data
          python -u scripts/make_dashboard_hourly.py --source data/outlook_source.json --out data/outlook_hourly.json

      - name: Compute Lux strategy (1h)
        run: |
          set -euo pipefail
          python -u scripts/compute_trend_hourly.py

      - name: Validate required keys
        run: |
          python - <<'PY'
          import json, sys
          j = json.load(open("data/outlook_hourly.json","r",encoding="utf-8"))
          m = j.get("metrics") or {}
          need = ["breadth_1h_pct","momentum_1h_pct","squeeze_1h_pct","liquidity_1h","volatility_1h_pct"]
          for k in need:
            if k not in m:
              print("missing metric:", k); sys.exit(1)
          h = j.get("hourly") or {}
          sig = h.get("signals") or {}
          for k in ("sigOverall1h","sigEMA1h","sigSMI1h"):
            if k not in sig or "state" not in sig[k]:
              print("missing signal:", k); sys.exit(1)
          st = (j.get("strategy") or {}).get("trend1h") or {}
          if "state" not in st or "updatedAt" not in st:
            print("missing strategy.trend1h"); sys.exit(1)
          print("OK")
          PY

      - name: Write heartbeat
        run: |
          date -u +"%Y-%m-%dT%H:%M:%SZ" > data/heartbeat_1h

      - name: Detect change
        id: diff
        run: |
          set -euo pipefail
          changed=true
          if git rev-parse --verify --quiet "origin/${{ env.LIVE_BRANCH }}" >/dev/null; then
            git fetch --depth=1 origin "${{ env.LIVE_BRANCH }}"
            git show "origin/${{ env.LIVE_BRANCH }}:data/outlook_hourly.json" > /tmp/prev.json || true
            if [ -s /tmp/prev.json ] && cmp -s data/outlook_hourly.json /tmp/prev.json; then
              changed=false
            fi
          fi
          echo "changed=${changed}" >> $GITHUB_OUTPUT

      - name: Publish live branch
        if: ${{ steps.diff.outputs.changed == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.email "bot@ci.local"
          git config user.name  "CI Bot"
          git fetch --depth=1 origin "${{ env.LIVE_BRANCH }}" || true
          git checkout -B "${{ env.LIVE_BRANCH }}" "origin/${{ env.LIVE_BRANCH }}" || git checkout -B "${{ env.LIVE_BRANCH }}"
          mkdir -p data
          cp -f data/outlook_hourly.json data/outlook_hourly.json
          cp -f data/heartbeat_1h data/heartbeat_1h
          git add data/outlook_hourly.json data/heartbeat_1h
          if git diff --cached --quiet; then
            echo "no changes to commit"
          else:
            git commit -m "hourly publish $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git push -f origin "${{ env.LIVE_BRANCH }}"
          fi
