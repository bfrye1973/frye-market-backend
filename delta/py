#!/usr/bin/env python3
# pure diff job: mirror /live/intraday → compute 5m deltas → push sandbox
import os, json, subprocess, tempfile, shutil, urllib.request, time
from datetime import datetime, timezone, timedelta
try:
    from zoneinfo import ZoneInfo
    AZ = ZoneInfo("America/Phoenix")
except Exception:
    AZ = timezone(timedelta(hours=-7))  # fallback (no DST handling, but safer than None)

# ---- ENV ----
REPO_URL   = os.environ["REPO_URL"]                      # e.g. https://github.com/bfrye1973/frye-market-backend.git
BRANCH     = os.environ.get("BRANCH","data-live-10min-sandbox")
LIVE_URL   = os.environ["LIVE_URL"]                      # e.g. https://frye-market-backend-1.onrender.com/live/intraday
GIT_NAME   = os.environ.get("GIT_NAME","frye-bot")
GIT_EMAIL  = os.environ.get("GIT_EMAIL","bot@users.noreply.github.com")
TOKEN      = os.environ["GITHUB_TOKEN"]                  # repo-scoped PAT
REPO_AUTH  = REPO_URL.replace("https://","https://"+TOKEN+"@")

OUT_PATH   = "data/outlook_intraday.json"
HEARTBEAT  = "data/heartbeat_5min.txt"

# ---- helpers ----
def now_az():
    return datetime.now(tz=AZ)

def az_iso(dt=None):
    dt = dt or now_az()
    return dt.replace(microsecond=0).isoformat()

def floor_to_interval(dt, minutes):
    # floor to completed N-minute bar in AZ
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=AZ)
    m = (dt.minute // minutes) * minutes
    return dt.replace(minute=m, second=0, microsecond=0)

def fetch_json(url: str):
    u = url + ("&t=" if "?" in url else "?t=") + str(int(time.time()))
    req = urllib.request.Request(u, headers={"Cache-Control":"no-store","User-Agent":"delta-cron/1.0"})
    with urllib.request.urlopen(req, timeout=20) as resp:
        return json.loads(resp.read().decode("utf-8"))

def pct(num, den): 
    return 0.0 if den == 0 else 100.0 * num / den

# canonical sector order (11)
CANON = [
    "information technology","materials","health care","communication services",
    "real estate","energy","consumer staples","consumer discretionary",
    "financials","utilities","industrials",
]

ALIASES = {
    "healthcare":"health care","health care":"health care","health-care":"health care",
    "info tech":"information technology","technology":"information technology",
    "communications":"communication services","comm services":"communication services","telecom":"communication services",
    "staples":"consumer staples","discretionary":"consumer discretionary",
    "finance":"financials","industry":"industrials","reit":"real estate","reits":"real estate",
}

def canon_name(name: str) -> str:
    n = (name or "").strip().lower()
    return ALIASES.get(n, n)

def sector_map(cards):
    """map: sector -> dict(breadth_pct, momentum_pct, nh, nl, up, down)"""
    m = {}
    for c in cards or []:
        s  = canon_name(c.get("sector",""))
        if not s: 
            continue
        nh = int(c.get("nh",0)); nl = int(c.get("nl",0))
        up = int(c.get("up",0)); dn = int(c.get("down",0))
        b  = pct(nh, nh+nl); mo = pct(up, up+dn)
        m[s] = {"breadth_pct":b, "momentum_pct":mo, "nh":nh, "nl":nl, "up":up, "down":dn}
    return m

def summarize(cards):
    nh=nl=up=dn=0
    for c in cards or []:
        nh += int(c.get("nh",0)); nl += int(c.get("nl",0))
        up += int(c.get("up",0)); dn += int(c.get("down",0))
    return pct(nh, nh+nl), pct(up, up+dn)

def clip2(x, eps=0.05):
    return 0.0 if abs(x) < eps else round(x, 2)

def atomic_write(path, obj):
    tmp = path + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(obj, f, ensure_ascii=False, separators=(",", ":"))
    os.replace(tmp, path)

def main():
    # 1) Pull canonical intraday
    live = fetch_json(LIVE_URL)
    src_ts = live.get("sectorsUpdatedAt") or live.get("updated_at")  # prefer AZ string if present

    # 2) Compute aligned barTs (floor to 5m AZ)
    bar_ts = az_iso(floor_to_interval(now_az(), 5))

    # 3) Fetch previous sandbox (if exists)
    prev = None
    try:
        prev_raw = urllib.request.urlopen(
            f"https://raw.githubusercontent.com/{REPO_URL.split('github.com/')[1].replace('.git','')}/{BRANCH}/{OUT_PATH}",
            timeout=20
        ).read().decode("utf-8")
        prev = json.loads(prev_raw)
    except Exception:
        prev = None

    # 4) Skip-if-same (same canonical ts AND same bar boundary)
    prev_src = prev.get("sourceTs") if prev else None
    prev_bar = prev.get("barTs")    if prev else None
    if prev and src_ts and prev_src == src_ts and prev_bar == bar_ts:
        # Only touch heartbeat (no recompute, no flicker)
        tmp = tempfile.mkdtemp(prefix="delta-")
        try:
            subprocess.check_call(["git","config","--global","user.name",GIT_NAME])
            subprocess.check_call(["git","config","--global","user.email",GIT_EMAIL])
            subprocess.check_call(["git","clone","--depth","1","--branch",BRANCH,REPO_AUTH,os.path.join(tmp,"repo")])
            repo = os.path.join(tmp,"repo")
            hb   = os.path.join(repo, HEARTBEAT)
            os.makedirs(os.path.dirname(hb), exist_ok=True)
            with open(hb,"w",encoding="utf-8") as f:
                f.write(az_iso()+"\n")
            subprocess.check_call(["git","-C",repo,"add",HEARTBEAT])
            subprocess.call(["git","-C",repo,"commit","-m",f"delta: skip (src={src_ts} bar={bar_ts})"])
            subprocess.check_call(["git","-C",repo,"push","origin",BRANCH])
            print("[SKIP] same sourceTs & barTs → no recompute")
        finally:
            shutil.rmtree(tmp, ignore_errors=True)
        return

    # 5) Build maps (canonicalize names; always produce 11 keys)
    cards_now  = live.get("sectorCards") or []
    cards_prev = prev.get("sectorCards") if prev else []
    now_map    = sector_map(cards_now)
    prev_map   = sector_map(cards_prev)

    d_sectors = {}
    for s in CANON:
        a = now_map.get(s,  {"breadth_pct":0.0,"momentum_pct":0.0,"nh":0,"nl":0})
        b = prev_map.get(s, {"breadth_pct":0.0,"momentum_pct":0.0,"nh":0,"nl":0})
        dB = clip2(a["breadth_pct"]  - b["breadth_pct"])
        dM = clip2(a["momentum_pct"] - b["momentum_pct"])
        net_now  = a["nh"] - a["nl"]
        net_prev = b["nh"] - b["nl"]
        d_sectors[s] = {
            "dBreadthPct": dB,
            "dMomentumPct": dM,
            "netTilt": clip2((dB + dM) / 2.0),
            "dNetNH": net_now - net_prev,
        }

    # market-level deltas from metrics (clip + round)
    cb, cm = summarize(cards_now)
    pb, pm = summarize(cards_prev) if cards_prev else (0.0, 0.0)
    d_market = {
        "dBreadthPct": clip2(cb - pb),
        "dMomentumPct": clip2(cm - pm),
        "netTilt":     clip2(((cb - pb) + (cm - pm)) / 2.0),
    }

    # 6) Assemble sandbox payload (include health + spec)
    out = dict(live)
    out["version"] = "sandbox-10m-deltas"
    out.setdefault("meta", {})
    out["meta"]["source"]  = "mirror-cron"
    out["meta"]["sandbox"] = True
    out["deltas"] = {"market": d_market, "sectors": d_sectors}
    out["deltasUpdatedAt"] = az_iso()
    out["barTs"]           = bar_ts        # aligned 5m boundary
    out["sourceTs"]        = src_ts        # canonical src timestamp
    out["deltaSpec"]       = "breadth_pct,momentum_pct;round=2;clip=0.05;canon=11"

    # 7) Clone branch → atomic write → commit/push
    tmp = tempfile.mkdtemp(prefix="delta-")
    try:
        subprocess.check_call(["git","config","--global","user.name",GIT_NAME])
        subprocess.check_call(["git","config","--global","user.email",GIT_EMAIL])
        os.chdir(tmp)
        subprocess.check_call(["git","clone","--depth","1","--branch",BRANCH,REPO_AUTH,"repo"])
        repo = os.path.join(tmp,"repo")
        os.makedirs(os.path.dirname(os.path.join(repo, OUT_PATH)), exist_ok=True)

        atomic_write(os.path.join(repo, OUT_PATH), out)
        with open(os.path.join(repo, HEARTBEAT),"w",encoding="utf-8") as f:
            f.write(az_iso()+"\n")

        subprocess.check_call(["git","-C",repo,"add",OUT_PATH,HEARTBEAT])
        subprocess.call(["git","-C",repo,"commit","-m",f"delta: bar={bar_ts} src={src_ts}"])
        subprocess.check_call(["git","-C",repo,"push","origin",BRANCH])
        print("[OK] wrote sandbox for", bar_ts, "using source", src_ts, "| market:", d_market)
    finally:
        shutil.rmtree(tmp, ignore_errors=True)

if __name__ == "__main__":
    main()
