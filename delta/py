#!/usr/bin/env python3
"""
delta_job.py — 5-minute sandbox deltas (pure diff, no Polygon)
- Pulls canonical /live/intraday JSON (10-minute publisher)
- Loads previous sandbox JSON (if any)
- Computes market/sector deltas and a 5-minute Overall Market "nowcast"
- Writes to data-live-10min-sandbox:
    data/outlook_intraday.json
    data/heartbeat_10min.txt
Env needed:
  REPO_URL=https://github.com/bfrye1973/frye-market-backend.git
  BRANCH=data-live-10min-sandbox
  LIVE_URL=https://frye-market-backend-1.onrender.com/live/intraday
  GITHUB_TOKEN=<repo PAT>   (for push)
  GIT_NAME=frye-bot
  GIT_EMAIL=bot@users.noreply.github.com
"""

import os, json, subprocess, tempfile, shutil, urllib.request, time
from datetime import datetime, timezone
try:
    from zoneinfo import ZoneInfo
    AZ = ZoneInfo("America/Phoenix")
except Exception:
    AZ = None

REPO_URL  = os.environ["REPO_URL"]
BRANCH    = os.environ.get("BRANCH", "data-live-10min-sandbox")
LIVE_URL  = os.environ["LIVE_URL"]
GIT_NAME  = os.environ.get("GIT_NAME","frye-bot")
GIT_EMAIL = os.environ.get("GIT_EMAIL","bot@users.noreply.github.com")
TOKEN     = os.environ["GITHUB_TOKEN"]
REPO_AUTH = REPO_URL.replace("https://","https://"+TOKEN+"@")

def az_iso():
    return (datetime.now(AZ) if AZ else datetime.now()).replace(microsecond=0).isoformat()

def fetch_json(url: str):
    u = url + ("&t=" if "?" in url else "?t=") + str(int(time.time()))
    req = urllib.request.Request(u, headers={"Cache-Control":"no-store","User-Agent":"delta-cron/1.0"})
    with urllib.request.urlopen(req, timeout=20) as resp:
        return json.loads(resp.read().decode("utf-8"))

def pct(num, den): return 0.0 if den == 0 else 100.0 * num / den

def summarize(cards):
    nh = nl = up = dn = 0
    for c in cards or []:
        nh += int(c.get("nh",0)); nl += int(c.get("nl",0))
        up += int(c.get("up",0)); dn += int(c.get("down",0))
    return pct(nh, nh+nl), pct(up, up+dn)

def sector_map(cards):
    m = {}
    for c in cards or []:
        nh = int(c.get("nh",0)); nl = int(c.get("nl",0))
        up = int(c.get("up",0)); dn = int(c.get("down",0))
        b  = pct(nh, nh+nl); mo = pct(up, up+dn)
        m[str(c.get("sector","Unknown"))] = (b, mo)
    return m

def clamp(x, lo, hi): return lo if x < lo else hi if x > hi else x

def main():
    tmp = tempfile.mkdtemp(prefix="delta-")
    try:
        # 1) Pull current live intraday (canonical 10m)
        curr = fetch_json(LIVE_URL)

        # 2) Load previous sandbox JSON (if exists)
        prev = None
        try:
            raw_prev = urllib.request.urlopen(
                f"https://raw.githubusercontent.com/{REPO_URL.split('github.com/')[1].replace('.git','')}/{BRANCH}/data/outlook_intraday.json",
                timeout=20
            ).read().decode("utf-8")
            prev = json.loads(raw_prev)
        except Exception:
            prev = None

        # 3) Compute deltas (market + sectors) from sectorCards
        cb, cm = summarize(curr.get("sectorCards"))
        pb, pm = summarize(prev.get("sectorCards")) if prev else (0.0, 0.0)
        d_market = {
            "dBreadthPct": round(cb - pb, 2),
            "dMomentumPct": round(cm - pm, 2),
            "netTilt": round(((cb - pb) + (cm - pm)) / 2.0, 2),
            "riskOnPct": round((cb + cm) / 2.0, 2),
        }

        curr_map = sector_map(curr.get("sectorCards"))
        prev_map = sector_map(prev.get("sectorCards")) if prev else {}
        d_sectors = {}
        for name, (b_now, m_now) in curr_map.items():
            b_prev, m_prev = prev_map.get(name, (0.0, 0.0))
            dB = round(b_now - b_prev, 2)
            dM = round(m_now - m_prev, 2)
            d_sectors[name] = {"dBreadthPct": dB, "dMomentumPct": dM, "netTilt": round((dB + dM)/2.0, 2)}

        out = dict(curr)
        out["version"] = "sandbox-10m-deltas"
        out.setdefault("meta", {})
        out["meta"]["source"] = "mirror-cron"
        out["meta"]["sandbox"] = True
        out["deltas"] = {"market": d_market, "sectors": d_sectors}
        out["deltasUpdatedAt"] = az_iso()

        # 4) 5-minute Overall Market "nowcast" (pure diff, flips inside 5 min)
        dB = d_market["dBreadthPct"]; dM = d_market["dMomentumPct"]
        accel = clamp(dB + dM, -20, 20)        # ±20 from acceleration
        emaKick = 0                             # keep zero to remain Polygon-free
        nowScore = clamp(accel + emaKick, -40, 40)
        state = "bull" if nowScore >= 10 else ("bear" if nowScore <= -10 else "neutral")
        confidence = round(abs(nowScore) / 40.0, 2)

        out.setdefault("intraday", {})
        out["intraday"]["overall10mNow"] = {
            "score": int(round(nowScore)),
            "state": state,
            "confidence": confidence,
            "updatedAt": out["deltasUpdatedAt"]
        }

        # 5) Clone sandbox branch, write, commit, push
        subprocess.check_call(["git","config","--global","user.name",GIT_NAME])
        subprocess.check_call(["git","config","--global","user.email",GIT_EMAIL])

        os.chdir(tmp)
        subprocess.check_call(["git","clone","--depth","1","--branch",BRANCH,REPO_AUTH,"repo"])
        os.chdir(os.path.join(tmp,"repo"))
        os.makedirs("data", exist_ok=True)
        with open("data/outlook_intraday.json","w",encoding="utf-8") as f:
            json.dump(out, f, ensure_ascii=False, indent=2)
        with open("data/heartbeat_10min.txt","w",encoding="utf-8") as f:
            f.write(az_iso()+"\n")

        subprocess.check_call(["git","add","data"])
        subprocess.call(["git","commit","-m",f"Sandbox deltas @ {datetime.utcnow().isoformat()}Z"])
        subprocess.check_call(["git","push","origin",BRANCH])

        print("[OK] deltas updated:", d_market, " nowcast:", out["intraday"]["overall10mNow"])
    finally:
        shutil.rmtree(tmp, ignore_errors=True)

if __name__ == "__main__":
    main()
